
How did viewing a diff between two versions of a file help you see the bug that was introduced?

It was much faster and practical than looking manually for the mistake!

How could having easy access to the entire history of a file make you a more efficient programmer
in the long term?

It makes much easier to correct mistakes in the code and return to stable versions. 

What do you think are the pros and cons of manually choosing when to create a commit, like
you do in Git, vs having versions automatically saved, like Google Docs does?

Commits can be logically separated and not just randomly. 

Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately? 

Because some version control systems, like Git, focus on programming files which are connected. 

How can you use the commands git log and git diff to view the history of files?

In the case of git log is it useful to add --stat in order to show additional information.
In the case of git diff the ids of the commits must be added in the order from older to newer. 

How might using version control make you more confident to make changes that could break?

It is always possible to return to a previos version that runs stable. 

Now that you have your workspace set up, what do you want to try using Git for?

For the courses that require programming (e.g. Machine Learning) or personal projects.